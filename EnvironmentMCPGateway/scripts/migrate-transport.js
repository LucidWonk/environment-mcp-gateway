#!/usr/bin/env node

/**
 * MCP Transport Migration Utility
 * Helps migrate from STDIO to HTTP transport configuration
 */

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { resolve, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const CONFIG_PATHS = [
    resolve(__dirname, '../.env.development'),
    resolve(__dirname, '../.env'),
    resolve(process.cwd(), '.env.development'),
    resolve(process.cwd(), '.env')
];

function findConfigFile() {
    for (const path of CONFIG_PATHS) {
        if (existsSync(path)) {
            return path;
        }
    }
    return null;
}

function parseEnvFile(content) {
    const lines = content.split('\n');
    const config = {};
    
    for (const line of lines) {
        const trimmed = line.trim();
        if (trimmed && !trimmed.startsWith('#')) {
            const [key, ...valueParts] = trimmed.split('=');
            if (key) {
                config[key.trim()] = valueParts.join('=').trim();
            }
        }
    }
    
    return config;
}

function generateMigratedConfig(originalConfig) {
    const migrated = { ...originalConfig };
    
    // Set default transport configuration
    if (!migrated.MCP_TRANSPORT_TYPE) {
        migrated.MCP_TRANSPORT_TYPE = 'http';
        console.log('✅ Added MCP_TRANSPORT_TYPE=http (default)');
    }
    
    if (!migrated.MCP_SERVER_PORT) {
        migrated.MCP_SERVER_PORT = '3001';
        console.log('✅ Added MCP_SERVER_PORT=3001 (default)');
    }
    
    if (!migrated.MCP_LOG_LEVEL) {
        migrated.MCP_LOG_LEVEL = 'info';
        console.log('✅ Added MCP_LOG_LEVEL=info (default)');
    }
    
    if (!migrated.MCP_ENABLE_DUAL_TRANSPORT) {
        migrated.MCP_ENABLE_DUAL_TRANSPORT = 'false';
        console.log('✅ Added MCP_ENABLE_DUAL_TRANSPORT=false (default)');
    }
    
    return migrated;
}

function generateEnvContent(config) {
    let content = '# MCP Transport Configuration (Migrated)\n';
    content += '# Generated by migrate-transport.js\n\n';
    
    // MCP Transport section
    content += '# =============================================================================\n';
    content += '# MCP TRANSPORT CONFIGURATION\n';
    content += '# =============================================================================\n';
    content += `MCP_TRANSPORT_TYPE=${config.MCP_TRANSPORT_TYPE || 'http'}\n`;
    content += `MCP_SERVER_PORT=${config.MCP_SERVER_PORT || '3001'}\n`;
    content += `MCP_LOG_LEVEL=${config.MCP_LOG_LEVEL || 'info'}\n`;
    content += `MCP_ENABLE_DUAL_TRANSPORT=${config.MCP_ENABLE_DUAL_TRANSPORT || 'false'}\n\n`;
    
    // Other configuration
    content += '# =============================================================================\n';
    content += '# OTHER CONFIGURATION\n';
    content += '# =============================================================================\n';
    
    for (const [key, value] of Object.entries(config)) {
        if (!key.startsWith('MCP_')) {
            content += `${key}=${value}\n`;
        }
    }
    
    return content;
}

function generateClaudeCodeConfig(transportType = 'http', port = 3001) {
    if (transportType === 'http') {
        return {
            mcpServers: {
                'lucidwonks-environment': {
                    command: 'node',
                    args: ['dist/server.js'],
                    transport: 'sse',
                    url: `http://localhost:${port}/mcp`
                }
            }
        };
    } else {
        return {
            mcpServers: {
                'lucidwonks-environment': {
                    command: 'node',
                    args: ['dist/server.js'],
                    env: {
                        MCP_TRANSPORT_TYPE: 'stdio'
                    }
                }
            }
        };
    }
}

async function main() {
    console.log('🔄 MCP Transport Migration Utility');
    console.log('=====================================\n');
    
    const configPath = findConfigFile();
    
    if (!configPath) {
        console.log('⚠️  No configuration file found. Creating new .env.development...');
        
        const newConfig = {
            MCP_TRANSPORT_TYPE: 'http',
            MCP_SERVER_PORT: '3001',
            MCP_LOG_LEVEL: 'info',
            MCP_ENABLE_DUAL_TRANSPORT: 'false'
        };
        
        const newPath = resolve(process.cwd(), '.env.development');
        const content = generateEnvContent(newConfig);
        
        writeFileSync(newPath, content, 'utf8');
        console.log(`✅ Created new configuration: ${newPath}`);
    } else {
        console.log(`📖 Reading configuration from: ${configPath}`);
        
        const content = readFileSync(configPath, 'utf8');
        const originalConfig = parseEnvFile(content);
        
        console.log('📊 Current configuration:');
        console.log(`   Transport Type: ${originalConfig.MCP_TRANSPORT_TYPE || 'not set'}`);
        console.log(`   Server Port: ${originalConfig.MCP_SERVER_PORT || 'not set'}`);
        console.log(`   Log Level: ${originalConfig.MCP_LOG_LEVEL || 'not set'}`);
        console.log(`   Dual Transport: ${originalConfig.MCP_ENABLE_DUAL_TRANSPORT || 'not set'}\n`);
        
        console.log('🔄 Applying migration...');
        const migratedConfig = generateMigratedConfig(originalConfig);
        
        // Backup original
        const backupPath = `${configPath}.backup.${Date.now()}`;
        writeFileSync(backupPath, content, 'utf8');
        console.log(`💾 Backup created: ${backupPath}`);
        
        // Write migrated configuration
        const migratedContent = generateEnvContent(migratedConfig);
        writeFileSync(configPath, migratedContent, 'utf8');
        console.log(`✅ Configuration migrated: ${configPath}`);
    }
    
    console.log('\n📋 Recommended Claude Code Client Configuration:');
    console.log('=================================================');
    
    const transportType = process.env.MCP_TRANSPORT_TYPE || 'http';
    const port = process.env.MCP_SERVER_PORT || 3001;
    
    const claudeConfig = generateClaudeCodeConfig(transportType, port);
    console.log(JSON.stringify(claudeConfig, null, 2));
    
    console.log('\n✅ Migration completed successfully!');
    console.log('\n📖 Next Steps:');
    console.log('  1. Review the migrated configuration file');
    console.log('  2. Update your Claude Code client configuration');
    console.log('  3. Test the connection with: npm start');
    console.log('  4. For dual transport mode, set MCP_ENABLE_DUAL_TRANSPORT=true');
    
    console.log('\n🔗 For more information, see: Documentation/EnvironmentMCPGateway/');
}

main().catch(error => {
    console.error('❌ Migration failed:', error);
    process.exit(1);
});