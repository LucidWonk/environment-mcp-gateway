/**
 * Context Templates Service
 * Provides templates for generating enhanced .context files
 * Part of Context Engineering Enhancement system (TEMP-CONTEXT-ENGINE-a7b3)
 */
export class ContextTemplates {
    /**
     * Domain overview template for .context files
     * Business Rule: Must include business concepts, domain analysis, and confidence metrics
     */
    static getDomainOverviewTemplate() {
        return {
            name: 'domain-overview',
            description: 'Template for domain overview context files',
            variables: ['domain', 'concepts', 'confidence', 'files'],
            template: `# {{domain}} Domain Overview

Generated from semantic analysis of {{files}} files.
Last updated: {{timestamp}}

## Business Concepts

{{#concepts}}
### {{type}}s
{{#items}}
- **{{name}}** (confidence: {{confidence}}%)
  Context: {{context}}
{{/items}}

{{/concepts}}

## Domain Analysis
- Average concept confidence: {{confidence}}%
- Total concepts identified: {{totalConcepts}}
- Files analyzed: {{files}}
- Cross-domain dependencies: {{crossDomainCount}}

## Quality Metrics
- Semantic analysis coverage: {{coverage}}%
- Business rule extraction: {{businessRules}} rules
- Integration points: {{integrationPoints}}
- Last analysis: {{lastAnalysis}}

---
*Generated by Context Engineering Enhancement System*
*Placeholder ID: TEMP-CONTEXT-ENGINE-a7b3*
`
        };
    }
    /**
     * Current implementation template
     * Business Rule: Must reflect actual code state and recent changes
     */
    static getCurrentImplementationTemplate() {
        return {
            name: 'current-implementation',
            description: 'Template for current implementation context files',
            variables: ['files', 'changes', 'components'],
            template: `# Current Implementation

Analysis of current codebase state.
Generated: {{timestamp}}

## Recent Changes Summary
{{#changes}}
### {{changeType}} Changes
{{#files}}
- **{{filePath}}**
  - Language: {{language}}
  - Impact: {{impactLevel}}
  - Components affected: {{affectedComponents}}
{{/files}}
{{/changes}}

## Implementation Health
- Total files analyzed: {{totalFiles}}
- Code coverage: {{coverage}}%
- Business rule violations: {{violations}}
- Technical debt items: {{technicalDebt}}

## Architecture Compliance
- DDD pattern adherence: {{dddCompliance}}%
- SOLID principle compliance: {{solidCompliance}}%
- Domain boundary violations: {{boundaryViolations}}

## Performance Metrics
- Analysis time: {{analysisTime}}ms
- Cache hit rate: {{cacheHitRate}}%
- File processing rate: {{processingRate}} files/sec

---
*Generated by Context Engineering Enhancement System*
*Placeholder ID: TEMP-CONTEXT-ENGINE-a7b3*
`
        };
    }
    /**
     * Business rules template
     * Business Rule: Must include all extracted business rules with confidence levels
     */
    static getBusinessRulesTemplate() {
        return {
            name: 'business-rules',
            description: 'Template for business rules context files',
            variables: ['rules', 'categories', 'confidence'],
            template: `# Business Rules

Extracted {{totalRules}} business rules from semantic analysis.
Average confidence: {{averageConfidence}}%

{{#categories}}
## {{categoryName}} Rules

{{#rules}}
{{index}}. **{{description}}**
   - Confidence: {{confidence}}%
   - Source: {{sourceLocation}}
   - Domain: {{domain}}
   - Impact: {{impactLevel}}
   - Validation: {{hasValidation}}

{{/rules}}
{{/categories}}

## Rule Categories Summary
{{#categorySummary}}
- **{{category}}**: {{count}} rules ({{percentage}}%)
{{/categorySummary}}

## Validation Status
- Rules with validation: {{validatedRules}}/{{totalRules}}
- Critical rules: {{criticalRules}}
- Domain-specific rules: {{domainSpecificRules}}

## Compliance Monitoring
- Rules actively enforced: {{enforcedRules}}%
- Rules requiring implementation: {{pendingRules}}
- Deprecated rules: {{deprecatedRules}}

---
*Generated by Context Engineering Enhancement System*
*Placeholder ID: TEMP-CONTEXT-ENGINE-a7b3*
`
        };
    }
    /**
     * Integration points template
     * Business Rule: Must document cross-domain dependencies and interfaces
     */
    static getIntegrationPointsTemplate() {
        return {
            name: 'integration-points',
            description: 'Template for integration points context files',
            variables: ['domains', 'dependencies', 'interfaces'],
            template: `# Integration Points

Cross-domain integration analysis.
Domains analyzed: {{domainCount}}

## Cross-Domain Dependencies
{{#dependencies}}
### {{sourceDomain}} → {{targetDomain}}
- Dependency type: {{dependencyType}}
- Interface: {{interface}}
- Stability: {{stability}}
- Risk level: {{riskLevel}}
- Components: {{components}}

{{/dependencies}}

## Domain Distribution
{{#domains}}
- **{{domain}}**: {{fileCount}} files (confidence: {{confidence}}%)
  {{#concepts}}
  - {{conceptType}}: {{count}}
  {{/concepts}}

{{/domains}}

## API Interfaces
{{#interfaces}}
### {{name}}
- Type: {{type}}
- Consumers: {{consumers}}
- Providers: {{providers}}
- Stability: {{stability}}
- Documentation: {{hasDocumentation}}

{{/interfaces}}

## Event Flows
{{#events}}
- **{{eventName}}**: {{sourceDomain}} → {{targetDomains}}
  - Frequency: {{frequency}}
  - Criticality: {{criticality}}
{{/events}}

## Integration Health
- Total integration points: {{totalIntegrations}}
- Stable interfaces: {{stableInterfaces}}%
- Breaking changes risk: {{breakingChangeRisk}}
- Monitoring coverage: {{monitoringCoverage}}%

---
*Generated by Context Engineering Enhancement System*
*Placeholder ID: TEMP-CONTEXT-ENGINE-a7b3*
`
        };
    }
    /**
     * Recent changes template
     * Business Rule: Must track all changes with impact analysis
     */
    static getRecentChangesTemplate() {
        return {
            name: 'recent-changes',
            description: 'Template for recent changes context files',
            variables: ['changes', 'impact', 'timeline'],
            template: `# Recent Changes

Analysis of {{totalFiles}} changed files.
Change window: {{changeWindow}}
Generated: {{timestamp}}

## Change Summary by Impact
{{#impactLevels}}
### {{level}} Impact Changes ({{count}} files)
{{#files}}
- **{{filePath}}**
  - Change type: {{changeType}}
  - Domain: {{domain}} ({{confidence}}% confidence)
  - Business concepts: {{conceptCount}}
  - Business rules: {{ruleCount}}
  - Components affected: {{affectedComponents}}

{{/files}}
{{/impactLevels}}

## Domain Impact Analysis
{{#domainImpacts}}
### {{domain}} Domain
- Files changed: {{fileCount}}
- Impact level: {{overallImpact}}
- New concepts: {{newConcepts}}
- Modified concepts: {{modifiedConcepts}}
- Removed concepts: {{removedConcepts}}
- Risk assessment: {{riskLevel}}

{{/domainImpacts}}

## Business Rule Changes
{{#ruleChanges}}
- **{{rule}}**: {{changeType}}
  - Domain: {{domain}}
  - Impact: {{impact}}
  - Validation required: {{needsValidation}}
{{/ruleChanges}}

## Change Timeline
{{#timeline}}
{{timestamp}}: {{changeType}} in {{domain}} - {{description}}
{{/timeline}}

## Quality Metrics
- Test coverage for changes: {{testCoverage}}%
- Code review completion: {{reviewCompletion}}%
- Documentation updates: {{docUpdates}}%
- Integration test status: {{integrationTests}}

## Risk Assessment
- Breaking change risk: {{breakingChangeRisk}}
- Performance impact: {{performanceImpact}}
- Security implications: {{securityImplications}}
- Rollback complexity: {{rollbackComplexity}}

---
*Generated by Context Engineering Enhancement System*
*Placeholder ID: TEMP-CONTEXT-ENGINE-a7b3*
`
        };
    }
    /**
     * Get all available context templates
     */
    static getAllTemplates() {
        return [
            this.getDomainOverviewTemplate(),
            this.getCurrentImplementationTemplate(),
            this.getBusinessRulesTemplate(),
            this.getIntegrationPointsTemplate(),
            this.getRecentChangesTemplate()
        ];
    }
    /**
     * Get template by name
     */
    static getTemplate(name) {
        const templates = this.getAllTemplates();
        return templates.find(template => template.name === name);
    }
    /**
     * Simple template renderer (basic mustache-like syntax)
     * Business Rule: Template rendering must handle missing variables gracefully
     */
    static renderTemplate(template, data) {
        let rendered = template;
        try {
            // Handle simple {{variable}} replacements
            rendered = rendered.replace(/\{\{(\w+)\}\}/g, (match, variable) => {
                return data[variable] !== undefined ? String(data[variable]) : match;
            });
            // Handle {{#array}} blocks (simple iteration)
            rendered = rendered.replace(/\{\{#(\w+)\}\}(.*?)\{\{\/\1\}\}/gs, (match, arrayName, blockContent) => {
                const array = data[arrayName];
                if (!Array.isArray(array)) {
                    return '';
                }
                return array.map(item => {
                    let itemContent = blockContent;
                    // Replace variables within the block
                    if (typeof item === 'object' && item !== null) {
                        itemContent = itemContent.replace(/\{\{(\w+)\}\}/g, (varMatch, variable) => {
                            return item[variable] !== undefined ? String(item[variable]) : varMatch;
                        });
                    }
                    return itemContent;
                }).join('');
            });
            // Add timestamp if not provided
            if (!data.timestamp) {
                rendered = rendered.replace(/\{\{timestamp\}\}/g, new Date().toISOString());
            }
            return rendered;
        }
        catch (error) {
            console.error('Template rendering failed:', error);
            return `Template rendering failed: ${error instanceof Error ? error.message : 'Unknown error'}`;
        }
    }
    /**
     * Validate template data against template requirements
     */
    static validateTemplateData(templateName, data) {
        const template = this.getTemplate(templateName);
        if (!template) {
            return { valid: false, errors: [`Template '${templateName}' not found`] };
        }
        const errors = [];
        // Check for required variables
        template.variables.forEach(variable => {
            if (data[variable] === undefined) {
                errors.push(`Missing required variable: ${variable}`);
            }
        });
        // Additional validation based on template type
        switch (templateName) {
            case 'domain-overview':
                if (!Array.isArray(data.concepts)) {
                    errors.push('concepts must be an array');
                }
                break;
            case 'business-rules':
                if (!Array.isArray(data.rules)) {
                    errors.push('rules must be an array');
                }
                break;
            case 'integration-points':
                if (!Array.isArray(data.dependencies)) {
                    errors.push('dependencies must be an array');
                }
                break;
        }
        return { valid: errors.length === 0, errors };
    }
}
//# sourceMappingURL=context-templates.js.map