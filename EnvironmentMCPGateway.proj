<Project Sdk="Microsoft.Build.NoTargets/3.7.56">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ProjectType>Node.js</ProjectType>
    <OutputType>Library</OutputType>
    <ProjectGuid>{E8F5A7B2-4C3D-4F6E-9A8B-2D5C8E7F9A1B}</ProjectGuid>
    
    <!-- XUnit Test Configuration - Jest removed per testing standards -->
    <!-- TypeScript infrastructure testing uses XUnit via C# test project -->
    <!-- <JavaScriptTestFramework>Jest</JavaScriptTestFramework> -->
    <!-- <JavaScriptTestRoot>tests\</JavaScriptTestRoot> -->
    
    <!-- Disable .NET specific outputs -->
    <UseAppHost>false</UseAppHost>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
    <EnableDefaultItems>false</EnableDefaultItems>
    
    <!-- Project metadata -->
    <AssemblyTitle>Lucidwonks Environment MCP Gateway</AssemblyTitle>
    <Product>Lucidwonks Algorithmic Trading Platform</Product>
    <Description>MCP server providing development environment access for Lucidwonks trading platform with Git workflow enhancement and domain-driven design awareness</Description>
    <Copyright>Copyright Â© Lucidwonks 2025</Copyright>
    <Version>1.0.0</Version>
    
    <!-- Node.js specific properties -->
    <NodeJsVersion>18.0.0</NodeJsVersion>
    <TypeScriptVersion>5.3.3</TypeScriptVersion>
    <PackageManager>npm</PackageManager>
    
    <!-- Build output paths -->
    <OutputPath>dist\</OutputPath>
    <IntermediateOutputPath>obj\</IntermediateOutputPath>
    
    <!-- Enable solution-wide build integration -->
    <IsPackable>false</IsPackable>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
  </PropertyGroup>

  <!-- Define source files for Visual Studio -->
  <ItemGroup>
    <Content Include="package.json" />
    <Content Include="package-lock.json" />
    <Content Include="tsconfig.json" />
    <!-- <Content Include="jest.config.js" /> Jest configuration removed per testing standards -->
    <Content Include="eslint.config.js" />
    <Content Include="README.md" />
    <Content Include="INTEGRATION-SUMMARY.md" />
    <Content Include="FINAL-VALIDATION-SUMMARY.md" />
    <Content Include="SERVER-REGISTRATION-STATUS.md" />
    <Content Include="SERVER-TEST-STRATEGY-VALIDATION.md" />
    <Content Include="TEST-STRATEGY-VALIDATION.md" />
    <Content Include=".env.development" Condition="Exists('.env.development')" />
    <Content Include="mcp-server-config.json" />
    <Content Include="demo-integration.js" />
    <Content Include="server-tool-summary.js" />
    <Content Include="test-mcp.js" />
    <Content Include="test-simple.js" />
    <Content Include="scripts\clean.cjs" />
  </ItemGroup>

  <ItemGroup>
    <TypeScriptCompile Include="src\**\*.ts" />
    <TypeScriptCompile Include="tests\**\*.ts" />
    <None Include="src\**\*.js" />
    <None Include="src\**\*.json" />
    <None Include="tests\setup.ts" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="docker\Dockerfile" />
    <Content Include="docker\docker-compose.yml" />
    <Content Include="environment-mcp-gateway.log" Condition="Exists('environment-mcp-gateway.log')" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="src\adapters\" />
    <Folder Include="src\config\" />
    <Folder Include="src\domain\" />
    <Folder Include="src\infrastructure\" />
    <Folder Include="src\orchestrator\" />
    <Folder Include="src\types\" />
    <Folder Include="tests\unit\" />
    <Folder Include="tests\integration\" />
    <Folder Include="dist\" />
    <Folder Include="docker\" />
    <Folder Include="scripts\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.NoTargets" />
  </ItemGroup>

  <!-- npm package restore target -->
  <Target Name="NpmInstall" BeforeTargets="Build">
    <Message Text="Installing npm dependencies for EnvironmentMCPGateway..." Importance="high" />
    <Exec Command="npm install --legacy-peer-deps" WorkingDirectory="$(MSBuildProjectDirectory)" ContinueOnError="false" />
  </Target>

  <!-- TypeScript build target -->
  <Target Name="TypeScriptBuild" AfterTargets="NpmInstall" BeforeTargets="Build">
    <Message Text="Building TypeScript for EnvironmentMCPGateway..." Importance="high" />
    <Exec Command="npm run build" WorkingDirectory="$(MSBuildProjectDirectory)" ContinueOnError="false" />
  </Target>

  <!-- Clean target for npm and TypeScript artifacts -->
  <Target Name="NpmClean" BeforeTargets="Clean">
    <Message Text="Cleaning EnvironmentMCPGateway build artifacts..." Importance="high" />
    <!-- Use MSBuild's RemoveDir directly instead of npm script -->
    <RemoveDir Directories="$(MSBuildProjectDirectory)\dist" Condition="Exists('$(MSBuildProjectDirectory)\dist')" ContinueOnError="true" />
    <RemoveDir Directories="$(MSBuildProjectDirectory)\node_modules" Condition="Exists('$(MSBuildProjectDirectory)\node_modules')" ContinueOnError="true" />
    <!-- Also try npm clean as backup -->
    <Exec Command="npm run clean" WorkingDirectory="$(MSBuildProjectDirectory)" ContinueOnError="true" />
  </Target>

  <!-- Test target -->
  <Target Name="NpmTest" AfterTargets="Build" Condition="'$(RunTests)' == 'true'">
    <Message Text="Running tests for EnvironmentMCPGateway..." Importance="high" />
    <Exec Command="npm test" WorkingDirectory="$(MSBuildProjectDirectory)" ContinueOnError="false" />
  </Target>

  <!-- Visual Studio Test Integration -->
  <Target Name="VSTestLogger" AfterTargets="NpmTest">
    <Message Text="TypeScript tests completed. XUnit tests run separately via EnvironmentMCPGateway.Tests project." Importance="high" />
  </Target>

  <!-- Linting target -->
  <Target Name="NpmLint" AfterTargets="TypeScriptBuild" Condition="'$(RunLinting)' == 'true'">
    <Message Text="Running linting for EnvironmentMCPGateway..." Importance="high" />
    <Exec Command="npm run lint" WorkingDirectory="$(MSBuildProjectDirectory)" ContinueOnError="true" />
  </Target>

  <!-- Development server target -->
  <Target Name="NpmDev">
    <Message Text="Starting EnvironmentMCPGateway development server..." Importance="high" />
    <Exec Command="npm run dev" WorkingDirectory="$(MSBuildProjectDirectory)" ContinueOnError="false" />
  </Target>

  <!-- Production start target -->
  <Target Name="NpmStart" DependsOnTargets="Build">
    <Message Text="Starting EnvironmentMCPGateway production server..." Importance="high" />
    <Exec Command="npm start" WorkingDirectory="$(MSBuildProjectDirectory)" ContinueOnError="false" />
  </Target>

  <!-- Copy build outputs for deployment -->
  <Target Name="CopyBuildOutputs" AfterTargets="Build">
    <ItemGroup>
      <BuildOutputs Include="dist\**\*" />
      <BuildOutputs Include="package.json" />
      <BuildOutputs Include="mcp-server-config.json" />
    </ItemGroup>
    
    <Copy SourceFiles="@(BuildOutputs)" DestinationFolder="$(OutputPath)" SkipUnchangedFiles="true" Condition="'$(CopyBuildOutputs)' == 'true'" />
  </Target>

  <!-- Integration with solution-wide build properties -->
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <DefineConstants>DEBUG</DefineConstants>
    <RunLinting>true</RunLinting>
    <RunTests>false</RunTests>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <DefineConstants>RELEASE</DefineConstants>
    <RunLinting>true</RunLinting>
    <RunTests>true</RunTests>
    <CopyBuildOutputs>true</CopyBuildOutputs>
  </PropertyGroup>

</Project>