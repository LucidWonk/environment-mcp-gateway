# Multi-stage Dockerfile for Environment MCP Gateway
# FIXED VERSION - Idle container pattern for MCP STDIO communication
# Stage 1: Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY eslint.config.js ./

# Install all dependencies (including dev dependencies for building)
RUN npm ci

# Copy source code
COPY src/ ./src/

# Build the TypeScript project
RUN npm run build

# Run tests to validate build
# RUN npm test

# Run linting to ensure code quality
# RUN npm run lint

# Stage 2: Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S mcpuser -u 1001

# Copy package files and install production dependencies only
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist

# Copy environment files
COPY .env* ./

# Create necessary directories
RUN mkdir -p /app/.semantic-cache /app/.holistic-rollback /app/.atomic-ops && \
    chown -R mcpuser:nodejs /app

# Switch to non-root user
USER mcpuser

# Simple health check that verifies container is running
# The actual MCP server will be started on-demand by Claude
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD echo "Container ready for MCP connections" || exit 1

# Expose port (for potential future HTTP health endpoint)
EXPOSE 3001

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# CRITICAL FIX: Keep container idle instead of running server
# The server will be started fresh by Claude via docker exec
CMD ["tail", "-f", "/dev/null"]