# MCP Gateway CI/CD Pipeline
# Automatically builds, tests, and deploys MCP server + DevOps tools to ubuntu-devops.lan

trigger:
  branches:
    include:
    - master
    - main
  paths:
    include:
    - EnvironmentMCPGateway/*
    - docker-compose*
    - devops/*
    exclude:
    - README.md
    - docs/*

# Prevent concurrent deployments to same environment  
lockBehavior: sequential

variables:
  DEVOPS_SERVER: 'ubuntu-devops.lan'
  DEVOPS_USER: 'alex'  # Updated to match your SSH user
  CONTAINER_REGISTRY: 'your-registry'  # Update if using custom registry

stages:
- stage: BuildAndTest
  displayName: 'Build and Test MCP Server'
  jobs:
  - job: BuildJob
    displayName: 'Build MCP Gateway'
    pool: Default
    
    steps:
    - checkout: self
      displayName: 'Checkout Repository'
      
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '20.x'
        
    - script: |
        cd EnvironmentMCPGateway
        npm ci
        npm run build
        npm run lint
      displayName: 'Build TypeScript MCP Server'
      
    - task: UseDotNet@2
      displayName: 'Setup .NET 9'
      inputs:
        packageType: 'sdk'
        version: '9.x'
        
    - script: |
        dotnet build LucidwonksMCPGateway.sln
        dotnet test EnvironmentMCPGateway.Tests/ --logger trx --results-directory TestResults --filter "FullyQualifiedName~Unit"
      displayName: 'Build and Test .NET Components (Unit Tests Only)'
      
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/TestResults/*.trx'
      condition: always()
      
    - script: |
        cd EnvironmentMCPGateway
        docker build -f docker/Dockerfile -t mcp-gateway:$(Build.BuildId) .
      displayName: 'Build Docker Image'
      
    - script: |
        docker save mcp-gateway:$(Build.BuildId) | gzip > mcp-gateway-$(Build.BuildId).tar.gz
      displayName: 'Export Docker Image'
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Docker Image'
      inputs:
        pathtoPublish: 'mcp-gateway-$(Build.BuildId).tar.gz'
        artifactName: 'docker-image'

- stage: Deploy
  displayName: 'Deploy to ubuntu-devops.lan'
  dependsOn: BuildAndTest
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy MCP Server and Update DevOps Tools'
    environment: 'ubuntu-devops-lan'
    pool: Default
    # Ensure only one deployment at a time
    condition: succeeded()
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: docker-image
            
          - task: CopyFilesOverSSH@0
            displayName: 'Copy Docker Image to Server'
            inputs:
              sshEndpoint: 'ubuntu-devops-ssh'  # Configure this service connection
              sourceFolder: '$(Pipeline.Workspace)/docker-image'
              contents: '*.tar.gz'
              targetFolder: '/tmp/mcp-deploy'
              
          - task: CopyFilesOverSSH@0
            displayName: 'Copy Deployment Files'
            inputs:
              sshEndpoint: 'ubuntu-devops-ssh'
              sourceFolder: '$(Build.SourcesDirectory)'
              contents: |
                docker-compose.production.yml
                .env.production
              targetFolder: '/opt/mcp-gateway'
              
          - task: SSH@0
            displayName: 'Load MCP Server Image'
            inputs:
              sshEndpoint: 'ubuntu-devops-ssh'
              runOptions: 'commands'
              failOnStderr: false
              commands: |
                echo "Loading MCP Gateway image..."
                docker load < /tmp/mcp-deploy/mcp-gateway-$(Build.BuildId).tar.gz
                docker tag mcp-gateway:$(Build.BuildId) mcp-gateway:latest
                echo "MCP Gateway image loaded successfully"
                
          - task: SSH@0
            displayName: 'Complete Docker Cleanup'
            inputs:
              sshEndpoint: 'ubuntu-devops-ssh'
              runOptions: 'commands' 
              failOnStderr: false
              commands: |
                echo "Performing complete Docker cleanup to prevent ContainerConfig errors..."
                
                # Stop all compose services
                docker-compose -f /opt/mcp-gateway/docker-compose.production.yml down || true
                
                # Force remove any remaining containers
                docker container ls -a --format "{{.Names}}" | grep -E "(environment-mcp-gateway|bytebase|portainer)" | xargs -r docker container rm -f || true
                
                # Remove potentially corrupted registry images only (not our local mcp-gateway build)
                docker image ls --format "{{.Repository}}:{{.Tag}}" | grep -E "(bytebase|portainer)" | xargs -r docker image rm -f || true
                
                # Clean up dangling resources
                docker system prune -f >/dev/null 2>&1 || true
                
                echo "Docker cleanup complete"
                
          - task: SSH@0
            displayName: 'Deploy Services'  
            inputs:
              sshEndpoint: 'ubuntu-devops-ssh'
              runOptions: 'commands'
              failOnStderr: false
              commands: |
                echo "Pulling fresh registry images..."
                docker-compose -f /opt/mcp-gateway/docker-compose.production.yml pull bytebase portainer >/dev/null 2>&1 || true
                
                echo "Configuring Azure DevOps PAT securely..."
                echo "AZURE_DEVOPS_PAT=$(AZURE_DEVOPS_PAT)" >> /opt/mcp-gateway/.env.production
                
                echo "Starting services with fresh containers..."
                docker-compose -f /opt/mcp-gateway/docker-compose.production.yml up -d --force-recreate
                
                echo "Cleaning up..."
                rm -f /tmp/mcp-deploy/mcp-gateway-$(Build.BuildId).tar.gz
                
                echo "Deployment complete. Container status:"
                docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                
          - task: SSH@0
            displayName: 'Verify Container Status'
            inputs:
              sshEndpoint: 'ubuntu-devops-ssh'
              runOptions: 'commands'
              commands: |
                sleep 30
                echo "Container Status:"
                docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                
          - task: SSH@0
            displayName: 'Test Service Health'
            inputs:
              sshEndpoint: 'ubuntu-devops-ssh'
              runOptions: 'commands'
              commands: |
                echo "Testing MCP Gateway..."
                if curl -s -f http://localhost:3002/health > /dev/null; then
                  echo "✅ MCP Gateway: HEALTHY"
                else
                  echo "❌ MCP Gateway: FAILED"
                  echo "Container status:"
                  docker ps | grep environment-mcp-gateway || echo "Container not found"
                  echo "Recent logs:"
                  docker logs --tail 10 environment-mcp-gateway || echo "No logs available"
                fi
                
                echo "Testing Bytebase..."
                curl -s -f http://localhost:8080/api/ping > /dev/null && echo "✅ Bytebase: HEALTHY" || echo "❌ Bytebase: FAILED"
                
                echo "Testing Portainer..."
                curl -s -f http://localhost:9000/api/system/status > /dev/null && echo "✅ Portainer: HEALTHY" || echo "❌ Portainer: FAILED"
                
                echo "All health checks complete"