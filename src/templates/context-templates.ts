/**
 * Context Templates Service - Simplified Working Version
 * Provides templates for generating enhanced .context files
 */

export interface ContextTemplate {
    name: string;
    description: string;
    template: string;
    variables: string[];
}

export class ContextTemplates {
    /**
     * Domain overview template for .context files
     */
    static getDomainOverviewTemplate(): ContextTemplate {
        return {
            name: 'domain-overview',
            description: 'Template for domain overview context files',
            variables: ['domain', 'concepts', 'confidence', 'files'],
            template: `# {domain} Domain Context - Deep Implementation Analysis

## Domain Overview

The **{domain}** domain encompasses {componentCount} core components with {confidence}% analysis confidence.

{domainDescription}

## Core Components & Architecture

### Primary Classes and Services
{coreComponents}

## Business Logic Implementation

### Key Algorithms
{algorithms}

### Business Rules & Validation
{businessRules}

## Integration Architecture

### Cross-Domain Dependencies
{crossDomainDeps}

## Performance Characteristics
{performanceMetrics}

---

**Analysis Summary**  
**Domain Confidence**: {confidence}% ({componentCount} components analyzed)  
**Business Rules**: {businessRuleCount} identified  
**Integration Points**: {integrationPoints} external dependencies  
**Last Updated**: {timestamp} via MCP Context Engineering  

*This context was generated by deep semantic analysis of {fileCount} source files.*`
        };
    }

    /**
     * Current implementation template
     */
    static getCurrentImplementationTemplate(): ContextTemplate {
        return {
            name: 'current-implementation',
            description: 'Template for current implementation context files',
            variables: ['files', 'changes', 'components'],
            template: `# Current Implementation

Analysis of current codebase state.
Generated: {timestamp}

## Recent Changes Summary
{changes}

## Implementation Health
- Total files analyzed: {totalFiles}
- Code coverage: {coverage}%
- Business rule violations: {violations}
- Technical debt items: {technicalDebt}

## Architecture Compliance
- DDD pattern adherence: {dddCompliance}%
- SOLID principle compliance: {solidCompliance}%
- Domain boundary violations: {boundaryViolations}

---
*Generated by Context Engineering Enhancement System*`
        };
    }

    /**
     * Business rules template
     */
    static getBusinessRulesTemplate(): ContextTemplate {
        return {
            name: 'business-rules',
            description: 'Template for business rules context files',
            variables: ['rules', 'categories', 'confidence'],
            template: `# Business Rules

Extracted {totalRules} business rules from semantic analysis.
Average confidence: {averageConfidence}%

{ruleCategories}

## Rule Categories Summary
{categorySummary}

## Validation Status
- Rules with validation: {validatedRules}/{totalRules}
- Critical rules: {criticalRules}
- Domain-specific rules: {domainSpecificRules}

---
*Generated by Context Engineering Enhancement System*`
        };
    }

    /**
     * Integration points template
     */
    static getIntegrationPointsTemplate(): ContextTemplate {
        return {
            name: 'integration-points',
            description: 'Template for integration points context files',
            variables: ['domains', 'dependencies', 'interfaces'],
            template: `# Integration Points

Cross-domain integration analysis.
Domains analyzed: {domainCount}

## Cross-Domain Dependencies
{dependencies}

## Domain Distribution
{domains}

## Integration Health
- Total integration points: {totalIntegrations}
- Stable interfaces: {stableInterfaces}%
- Breaking changes risk: {breakingChangeRisk}
- Monitoring coverage: {monitoringCoverage}%

---
*Generated by Context Engineering Enhancement System*`
        };
    }

    /**
     * Recent changes template
     */
    static getRecentChangesTemplate(): ContextTemplate {
        return {
            name: 'recent-changes',
            description: 'Template for recent changes context files',
            variables: ['changes', 'impact', 'timeline'],
            template: `# Recent Changes

Analysis of {totalFiles} changed files.
Change window: {changeWindow}
Generated: {timestamp}

## Change Summary by Impact
{impactLevels}

## Domain Impact Analysis
{domainImpacts}

## Quality Metrics
- Test coverage for changes: {testCoverage}%
- Code review completion: {reviewCompletion}%
- Documentation updates: {docUpdates}%

---
*Generated by Context Engineering Enhancement System*`
        };
    }

    /**
     * Get all available context templates
     */
    static getAllTemplates(): ContextTemplate[] {
        return [
            this.getDomainOverviewTemplate(),
            this.getCurrentImplementationTemplate(),
            this.getBusinessRulesTemplate(),
            this.getIntegrationPointsTemplate(),
            this.getRecentChangesTemplate()
        ];
    }

    /**
     * Get template by name
     */
    static getTemplate(name: string): ContextTemplate | undefined {
        const templates = this.getAllTemplates();
        return templates.find(template => template.name === name);
    }

    /**
     * Simple template renderer
     */
    static renderTemplate(template: string, variables: Record<string, any>): string {
        let rendered = template;
        
        // Simple variable replacement
        for (const [key, value] of Object.entries(variables)) {
            const placeholder = `{${key}}`;
            rendered = rendered.replace(new RegExp(placeholder.replace(/[{}]/g, '\\$&'), 'g'), String(value || ''));
        }
        
        // Add timestamp if not provided
        if (!variables.timestamp) {
            rendered = rendered.replace(/{timestamp}/g, new Date().toISOString());
        }
        
        return rendered;
    }
}